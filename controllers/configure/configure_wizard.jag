<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
 
 var log = new Log("controller.configure_wizard"),
     util = require('/controllers/rest/rest_calls.jag');

//add login validator for pages
include('/controllers/login/validator.jag');
    
var step = request.getParameter('step');
if(step == null || step == undefined || step == ""){
    step = 1;
}

var configureStatus,
    stepData = {},
    wizard = {"step":step};
     
try {
    
    var configureWizard = function(){
        
        switch(wizard.step) {
            case 1:
            
                configureStatus = 'partitions';
                step_data = util.RESTCalls.getPartitions();
                
                if(step_data == null || step_data == undefined || step_data == ""){
                    step_data = {};
                }
                if(step_data.Error != undefined){
                    error.push(step_data.Error);
                }else{
                    step_data = step_data.partition;
                }
                
                break;
            case 2:
                
                configureStatus = 'autoscalingpolicies';
                step_data = util.RESTCalls.getPolicyAutoScale();
                
                step_data = util.RESTCalls.getPartitions();
                if(step_data == null || step_data == undefined || step_data == ""){
                    step_data = {};
                }
                if(step_data.Error != undefined){
                    error.push(step_data.Error);
                }else{
                    step_data = step_data.autoscalePolicy;
                }
                
                break;
            case 3:
            
                configureStatus = 'deployments';
                step_data = util.RESTCalls.getPolicyDeployment();
                
                if(step_data == null || step_data == undefined || step_data == ""){
                    step_data = {};
                }
                if(step_data.Error != undefined){
                    error.push(step_data.Error);
                }else{
                    step_data = step_data.deploymentPolicy;
                }
    
                break;
            case 4:
                configureStatus = 'cartridges';
                step_data = util.RESTCalls.getLbCartridges();
                break;
            case '5':
                configureStatus = 'multitenant';
                step_data = util.RESTCalls.getCartridges();
                break;
            case 6:
                configureStatus = 'services';
                step_data = util.RESTCalls.getServices();
                break;
        }
        return stringify(step_data);
    
    }

}catch(e){
    log.info(e);
}