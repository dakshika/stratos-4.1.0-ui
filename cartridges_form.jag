<%
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 */
include('/controllers/login/validator.jag');
include('/controllers/menu/menu_generator.jag');

var log = new Log("apachestratos.cartridge_form"),
        error = [],
        list_data,
        caramel = require('caramel'),
        context = caramel.configs().context,
        menuJson = require('/controllers/menu/menu.json'),
        util = require('/controllers/rest/rest_calls.jag'),
        uriMatcher = new URIMatcher(request.getRequestURI()),
        elements = uriMatcher.match('/{context}/cartridges/{formtype}/{cartridgeType}'),
        breadcrumbPathLevelOne = 'cartridges',
        isForm = true,
        userPermissions = session.get('PERMISSIONS');

//create left menu
var leftMenu = menuGenerator(context, menuJson.menu, userPermissions);


var autoScalePolicies = util.RESTCalls.getAutoScalePolicies();
var deploymentPolicies = util.RESTCalls.getApplicableDeploymentPolicies(elements.cartridgeType);
var mtServiceInfo = util.RESTCalls.getServiceInfo(elements.cartridgeType);
var cartridge = util.RESTCalls.getSingleTenantCartridgeInfo(elements.cartridgeType);
var autoScalePoliciesEnum = [],deploymentPoliciesEnum=[];

var formData = require('controllers/forms/schema/cartridges/' + elements.formtype + '.json'),
        formDataRaw = require('controllers/forms/default/cartridges/' + elements.formtype + '.json');

if(autoScalePolicies == null || autoScalePolicies == undefined || autoScalePolicies == ""){
    autoScalePolicies = {};
}else{
    for (var i = 0; i < autoScalePolicies.autoscalePolicy.length; i++) {
        autoScalePoliciesEnum.push(autoScalePolicies.autoscalePolicy[i].id);
    }
}

if(autoScalePolicies.Error != undefined ){
    error.push(autoScalePolicies.Error);
}

if(deploymentPolicies == null || deploymentPolicies == undefined || deploymentPolicies == ""){
    deploymentPolicies = {};
}else{
    for (var i = 0; i < deploymentPolicies.deploymentPolicy.length; i++) {
        deploymentPoliciesEnum.push(deploymentPolicies.deploymentPolicy[i].id);
    }

}
if(deploymentPolicies.Error != undefined ){
    error.push(deploymentPolicies.Error);
}

if(cartridge == null || cartridge == undefined || cartridge == ""){
    cartridge = {};
}
if(cartridge.Error != undefined ){
    error.push(cartridge.Error);
}

if(mtServiceInfo == null || mtServiceInfo == undefined || mtServiceInfo == ""){
    mtServiceInfo = {};
    //for single tenant
    formData.properties['autoscalePolicy']['enum'] = autoScalePoliciesEnum;
    formData.properties['deploymentPolicy']['enum'] = deploymentPoliciesEnum;
}else{
    log.info(mtServiceInfo );
    formData.properties['autoscalePolicy']['enum'] = [mtServiceInfo.serviceDefinitionBean.autoscalingPolicyName];
    formData.properties['deploymentPolicy']['enum'] = [mtServiceInfo.serviceDefinitionBean.deploymentPolicyName];
    formData.properties['autoscalePolicy']['options']['hidden'] = true;
    formData.properties['deploymentPolicy']['options']['hidden'] = true;
}

if(mtServiceInfo.Error != undefined ){
    error.push(mtServiceInfo.Error);
}





//modify data to get correct form UI
formDataRaw.cartridgeType = elements.cartridgeType;






var finalHtml = "<div class='container' id='content'>";

finalHtml += "<div class='row'>" +
        "<div class='container text-center'>" +
        "<div class='col-md-6'><button class='btn btn-default btn-lg' type='button' onclick='history.back(-1)'> Cancel</button></div>" +
        "<div class='col-md-6'><button class='btn btn-info btn-lg' type='button' id='subscribe' data-form='" + elements.formtype +
        "'> Subscribe</button></div>" +
        "</div>" +
        "</div>";

finalHtml += "<div class='form' action='#' id='textform'></div></div>";



var caramelData = {
    breadcrumbPathLevelOne: breadcrumbPathLevelOne,
    breadcrumbPathLevelTwo: elements.formtype,
    left_menu: leftMenu,
    isForm: isForm,
    formHtml: finalHtml,
    formTitle: elements.cartridgeType,
    formDataRaw: JSON.stringify(formDataRaw),
    //formDataRaw: JSON.stringify(partition_data.partition[0]),
    formData: JSON.stringify(formData),
    list_data: list_data,
    error: error
}


caramel.render(caramelData);

%>